services:
  ######################################### NGINX #########################################
  osctrl-nginx:
    container_name: 'osctrl-nginx-dev'
    image: nginx:${NGINX_VERSION}
    restart: unless-stopped
    ports:
      - 8000:80
      - 8443:443
    networks:
      - default
      - osctrl-dev-backend
    volumes:
      - type: bind
        source: ./deploy/docker/conf/nginx/nginx.conf
        target: /etc/nginx/nginx.conf
      - type: bind
        source: ./deploy/docker/conf/nginx/osctrl.conf
        target: /etc/nginx/conf.d/osctrl.conf
      - type: bind
        source: ./deploy/docker/conf/tls/osctrl.crt
        target: /etc/ssl/certs/osctrl.crt
      - type: bind
        source: ./deploy/docker/conf/tls/osctrl.key
        target: /etc/ssl/private/osctrl.key
    depends_on:
      - osctrl-tls
      - osctrl-admin
      - osctrl-api


  ######################################### osctrl-tls #########################################
  osctrl-tls:
    container_name: 'osctrl-tls-dev'
    image: 'osctrl-tls-dev:${OSCTRL_VERSION}'
    restart: unless-stopped
    build:
      context: .
      dockerfile: deploy/docker/dockerfiles/Dockerfile-dev-tls
      args:
        GOLANG_VERSION: ${GOLANG_VERSION}
    environment:
      #### osctrl-tls configuration settings ####
      - SERVICE_LISTENER=0.0.0.0
      - SERVICE_PORT=9000
      - SERVICE_HOST=0.0.0.0
      - SERVICE_AUTH=none
      - SERVICE_LOGGER=${OSCTRL_TLS_LOGGER}
      - LOGGER_DB_SAME=true
      - SERVICE_LOG_FORMAT=console
      #### Database settings ####
      - DB_HOST=osctrl-postgres
      - DB_NAME=${POSTGRES_DB_NAME}
      - DB_USER=${POSTGRES_DB_USERNAME}
      - DB_PASS=${POSTGRES_DB_PASSWORD}
      #### Redis settings ####
      - REDIS_HOST=osctrl-redis
    networks:
      - osctrl-dev-backend
    ports:
      - 127.0.0.1:9000:9000
    volumes:
      - .:/usr/src/app:rw,delegated
    depends_on:
      - osctrl-postgres
      - osctrl-redis


  ######################################### osctrl-admin #########################################
  osctrl-admin:
    container_name: 'osctrl-admin-dev'
    image: 'osctrl-admin-dev:${OSCTRL_VERSION}'
    restart: unless-stopped
    build:
      context: .
      dockerfile: deploy/docker/dockerfiles/Dockerfile-dev-admin
      args:
        GOLANG_VERSION: ${GOLANG_VERSION}
        OSQUERY_VERSION: ${OSQUERY_VERSION}
    environment:
      #### osctrl-admin configuration settings ####
      - SERVICE_LISTENER=0.0.0.0
      - SERVICE_PORT=9001
      - SERVICE_HOST=0.0.0.0
      - SERVICE_AUTH=db
      - JWT_SECRET=${JWT_SECRET}
      - SERVICE_LOGGER=db
      - SERVICE_LOG_FORMAT=console
      - LOGGER_DB_SAME=true
      - SESSION_KEY=${SESSION_KEY}
      #### Database settings ####
      - DB_HOST=osctrl-postgres
      - DB_NAME=${POSTGRES_DB_NAME}
      - DB_USER=${POSTGRES_DB_USERNAME}
      - DB_PASS=${POSTGRES_DB_PASSWORD}
      #### Redis settings ####
      - REDIS_HOST=osctrl-redis
    networks:
      - osctrl-dev-backend
    ports:
      - 127.0.0.1:9001:9001
    volumes:
      - .:/usr/src/app:rw,delegated
    depends_on:
      - osctrl-postgres
      - osctrl-redis


  ######################################### osctrl-api #########################################
  osctrl-api:
    container_name: 'osctrl-api-dev'
    image: 'osctrl-api-dev:${OSCTRL_VERSION}'
    restart: unless-stopped
    build:
      context: .
      dockerfile: deploy/docker/dockerfiles/Dockerfile-dev-api
      args:
        GOLANG_VERSION: ${GOLANG_VERSION}
        OSQUERY_VERSION: ${OSQUERY_VERSION}
    environment:
      #### osctrl-api configuration settings ####
      - SERVICE_LISTENER=0.0.0.0
      - SERVICE_PORT=9002
      - SERVICE_HOST=0.0.0.0
      - SERVICE_AUTH=jwt
      - JWT_SECRET=${JWT_SECRET}
      - SERVICE_LOGGER=db
      - SERVICE_LOG_FORMAT=console
      - AUDIT_LOG=true
      #### Database settings ####
      - DB_HOST=osctrl-postgres
      - DB_NAME=${POSTGRES_DB_NAME}
      - DB_USER=${POSTGRES_DB_USERNAME}
      - DB_PASS=${POSTGRES_DB_PASSWORD}
      #### Redis settings ####
      - REDIS_HOST=osctrl-redis
    networks:
      - osctrl-dev-backend
    ports:
      - 127.0.0.1:9002:9002
    volumes:
      - .:/usr/src/app:rw,delegated
    depends_on:
      - osctrl-postgres
      - osctrl-redis


  ######################################### PostgreSQL #########################################
  osctrl-postgres:
    container_name: 'osctrl-postgres-dev'
    image: postgres:${POSTGRES_VERSION}
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB_NAME}
      - POSTGRES_USER=${POSTGRES_DB_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_DB_PASSWORD}
    networks:
      - osctrl-dev-backend
    ports:
      - 127.0.0.1:5432:5432
    volumes:
      - postgres-osctrl-dev-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U ${POSTGRES_DB_USERNAME} -d ${POSTGRES_DB_NAME}'"]
      interval: 10s
      timeout: 5s
      retries: 5


  ######################################### Redis #########################################
  osctrl-redis:
    container_name: 'osctrl-redis-dev'
    image: redis:${REDIS_VERSION}
    restart: unless-stopped
    networks:
      - osctrl-dev-backend
    ports:
      - 127.0.0.1:6379:6379
    volumes:
      - redis-osctrl-dev-data:/data
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 10s
      timeout: 5s
      retries: 5


  ######################################### osctrl-cli #########################################
  # osctrl-cli is the component that creates the osctrl env and admin user
  ##############################################################################################
  osctrl-cli:
    container_name: 'osctrl-cli-dev'
    image: 'osctrl-cli-dev:${OSCTRL_VERSION}'
    restart: unless-stopped
    build:
      context: .
      target: osctrl-cli-dev
      dockerfile: deploy/docker/dockerfiles/Dockerfile-dev-cli
      args:
        GOLANG_VERSION: ${GOLANG_VERSION}
        OSQUERY_VERSION: ${OSQUERY_VERSION}
    tty: true # entrypoint executes `/bin/sh`
    environment:
      #### osctrl env ####
      - ENV_NAME=dev
      - CERT_FILE=/opt/osctrl/config/osctrl.crt
      - HOST=osctrl-nginx
      #### osctrl admin ####
      - OSCTRL_USER=${OSCTRL_USER}
      - OSCTRL_PASS=${OSCTRL_PASS}
      - API_URL=http://osctrl-api:9002
      #### Database settings ####
      - DB_HOST=osctrl-postgres
      - DB_NAME=${POSTGRES_DB_NAME}
      - DB_USER=${POSTGRES_DB_USERNAME}
      - DB_PASS=${POSTGRES_DB_PASSWORD}
    networks:
      - osctrl-dev-backend
    volumes:
      - type: bind
        source: ./deploy/docker/conf/tls/osctrl.crt
        target: /opt/osctrl/config/osctrl.crt
      - .:/usr/src/app:rw,delegated
    depends_on:
      - osctrl-postgres
      - osctrl-redis

  ######################################### osquery 1 #########################################
  osquery-1:
    container_name: 'osctrl-osquery-1-dev'
    image: 'osctrl-osquery-dev-1:${OSCTRL_VERSION}'
    restart: unless-stopped
    build:
      context: .
      target: osctrl-ubuntu-osquery
      dockerfile: deploy/docker/dockerfiles/Dockerfile-dev-cli
      args:
        GOLANG_VERSION: ${GOLANG_VERSION}
        OSQUERY_VERSION: ${OSQUERY_VERSION}
    environment:
      #### osquery enroll ####
      - ENV_NAME=dev
      - HOST=osctrl-nginx
      #### Database settings ####
      - DB_HOST=osctrl-postgres
      - DB_NAME=${POSTGRES_DB_NAME}
      - DB_USER=${POSTGRES_DB_USERNAME}
      - DB_PASS=${POSTGRES_DB_PASSWORD}
    networks:
      - osctrl-dev-backend
    volumes:
      - type: bind
        source: ./deploy/docker/conf/tls/osctrl.crt
        target: /opt/osctrl/config/osctrl.crt
      - osquery-osctrl-dev-1-data:/var/osquery
      - osquery-osctrl-dev-1-conf:/etc/osquery
    depends_on:
      - osctrl-tls
      - osctrl-api
      - osctrl-postgres

  ######################################### osquery 2 #########################################
  osquery-2:
    container_name: 'osctrl-osquery-2-dev'
    image: 'osctrl-osquery-dev-2:${OSCTRL_VERSION}'
    restart: unless-stopped
    build:
      context: .
      target: osctrl-ubuntu-osquery
      dockerfile: deploy/docker/dockerfiles/Dockerfile-dev-cli
      args:
        GOLANG_VERSION: ${GOLANG_VERSION}
        OSQUERY_VERSION: ${OSQUERY_VERSION}
    environment:
      #### osquery enroll ####
      - ENV_NAME=dev
      - HOST=osctrl-nginx
      #### Database settings ####
      - DB_HOST=osctrl-postgres
      - DB_NAME=${POSTGRES_DB_NAME}
      - DB_USER=${POSTGRES_DB_USERNAME}
      - DB_PASS=${POSTGRES_DB_PASSWORD}
    networks:
      - osctrl-dev-backend
    volumes:
      - type: bind
        source: ./deploy/docker/conf/tls/osctrl.crt
        target: /opt/osctrl/config/osctrl.crt
      - osquery-osctrl-dev-2-data:/var/osquery
      - osquery-osctrl-dev-2-conf:/etc/osquery
    depends_on:
      - osctrl-tls
      - osctrl-api
      - osctrl-postgres

  ######################################### osquery 3 #########################################
  osquery-3:
    container_name: 'osctrl-osquery-3-dev'
    image: 'osctrl-osquery-dev-3:${OSCTRL_VERSION}'
    restart: unless-stopped
    build:
      context: .
      target: osctrl-ubuntu-osquery
      dockerfile: deploy/docker/dockerfiles/Dockerfile-dev-cli
      args:
        GOLANG_VERSION: ${GOLANG_VERSION}
        OSQUERY_VERSION: ${OSQUERY_VERSION}
    environment:
      #### osquery enroll ####
      - ENV_NAME=dev
      - HOST=osctrl-nginx
      #### Database settings ####
      - DB_HOST=osctrl-postgres
      - DB_NAME=${POSTGRES_DB_NAME}
      - DB_USER=${POSTGRES_DB_USERNAME}
      - DB_PASS=${POSTGRES_DB_PASSWORD}
    networks:
      - osctrl-dev-backend
    volumes:
      - type: bind
        source: ./deploy/docker/conf/tls/osctrl.crt
        target: /opt/osctrl/config/osctrl.crt
      - osquery-osctrl-dev-3-data:/var/osquery
      - osquery-osctrl-dev-3-conf:/etc/osquery
    depends_on:
      - osctrl-tls
      - osctrl-api
      - osctrl-postgres

networks:
  osctrl-dev-backend:

volumes:
  postgres-osctrl-dev-db:
  redis-osctrl-dev-data:
  osquery-osctrl-dev-1-data:
  osquery-osctrl-dev-1-conf:
  osquery-osctrl-dev-2-data:
  osquery-osctrl-dev-2-conf:
  osquery-osctrl-dev-3-data:
  osquery-osctrl-dev-3-conf:
